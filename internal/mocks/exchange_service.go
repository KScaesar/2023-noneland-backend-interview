// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	app "noneland/backend/interview/internal/app"

	mock "github.com/stretchr/testify/mock"

	pkg "noneland/backend/interview/pkg"
)

// ExchangeQryService is an autogenerated mock type for the ExchangeQryService type
type ExchangeQryService struct {
	mock.Mock
}

type ExchangeQryService_Expecter struct {
	mock *mock.Mock
}

func (_m *ExchangeQryService) EXPECT() *ExchangeQryService_Expecter {
	return &ExchangeQryService_Expecter{mock: &_m.Mock}
}

// GetBalanceByUserId provides a mock function with given fields: ctx, usrId
func (_m *ExchangeQryService) GetBalanceByUserId(ctx context.Context, usrId string) (app.BalanceResponse, error) {
	ret := _m.Called(ctx, usrId)

	var r0 app.BalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (app.BalanceResponse, error)); ok {
		return rf(ctx, usrId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) app.BalanceResponse); ok {
		r0 = rf(ctx, usrId)
	} else {
		r0 = ret.Get(0).(app.BalanceResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, usrId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeQryService_GetBalanceByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByUserId'
type ExchangeQryService_GetBalanceByUserId_Call struct {
	*mock.Call
}

// GetBalanceByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - usrId string
func (_e *ExchangeQryService_Expecter) GetBalanceByUserId(ctx interface{}, usrId interface{}) *ExchangeQryService_GetBalanceByUserId_Call {
	return &ExchangeQryService_GetBalanceByUserId_Call{Call: _e.mock.On("GetBalanceByUserId", ctx, usrId)}
}

func (_c *ExchangeQryService_GetBalanceByUserId_Call) Run(run func(ctx context.Context, usrId string)) *ExchangeQryService_GetBalanceByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExchangeQryService_GetBalanceByUserId_Call) Return(_a0 app.BalanceResponse, _a1 error) *ExchangeQryService_GetBalanceByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeQryService_GetBalanceByUserId_Call) RunAndReturn(run func(context.Context, string) (app.BalanceResponse, error)) *ExchangeQryService_GetBalanceByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionListByUserId provides a mock function with given fields: ctx, userId, dtoPage, tRange
func (_m *ExchangeQryService) GetTransactionListByUserId(ctx context.Context, userId string, dtoPage pkg.PageParam, tRange pkg.TimestampRangeEndTimeLessThanEqual) (pkg.ListResponse[app.TransactionResponse], error) {
	ret := _m.Called(ctx, userId, dtoPage, tRange)

	var r0 pkg.ListResponse[app.TransactionResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.PageParam, pkg.TimestampRangeEndTimeLessThanEqual) (pkg.ListResponse[app.TransactionResponse], error)); ok {
		return rf(ctx, userId, dtoPage, tRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.PageParam, pkg.TimestampRangeEndTimeLessThanEqual) pkg.ListResponse[app.TransactionResponse]); ok {
		r0 = rf(ctx, userId, dtoPage, tRange)
	} else {
		r0 = ret.Get(0).(pkg.ListResponse[app.TransactionResponse])
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkg.PageParam, pkg.TimestampRangeEndTimeLessThanEqual) error); ok {
		r1 = rf(ctx, userId, dtoPage, tRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeQryService_GetTransactionListByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionListByUserId'
type ExchangeQryService_GetTransactionListByUserId_Call struct {
	*mock.Call
}

// GetTransactionListByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - dtoPage pkg.PageParam
//   - tRange pkg.TimestampRangeEndTimeLessThanEqual
func (_e *ExchangeQryService_Expecter) GetTransactionListByUserId(ctx interface{}, userId interface{}, dtoPage interface{}, tRange interface{}) *ExchangeQryService_GetTransactionListByUserId_Call {
	return &ExchangeQryService_GetTransactionListByUserId_Call{Call: _e.mock.On("GetTransactionListByUserId", ctx, userId, dtoPage, tRange)}
}

func (_c *ExchangeQryService_GetTransactionListByUserId_Call) Run(run func(ctx context.Context, userId string, dtoPage pkg.PageParam, tRange pkg.TimestampRangeEndTimeLessThanEqual)) *ExchangeQryService_GetTransactionListByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pkg.PageParam), args[3].(pkg.TimestampRangeEndTimeLessThanEqual))
	})
	return _c
}

func (_c *ExchangeQryService_GetTransactionListByUserId_Call) Return(_a0 pkg.ListResponse[app.TransactionResponse], _a1 error) *ExchangeQryService_GetTransactionListByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeQryService_GetTransactionListByUserId_Call) RunAndReturn(run func(context.Context, string, pkg.PageParam, pkg.TimestampRangeEndTimeLessThanEqual) (pkg.ListResponse[app.TransactionResponse], error)) *ExchangeQryService_GetTransactionListByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewExchangeQryService creates a new instance of ExchangeQryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeQryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeQryService {
	mock := &ExchangeQryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
