// Code generated by mockery v2.32.4. DO NOT EDIT.

package xMock

import (
	entity "noneland/backend/interview/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// GetUsers provides a mock function with given fields:
func (_m *MockUserRepository) GetUsers() ([]entity.User, error) {
	ret := _m.Called()

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockUserRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) GetUsers() *MockUserRepository_GetUsers_Call {
	return &MockUserRepository_GetUsers_Call{Call: _e.mock.On("GetUsers")}
}

func (_c *MockUserRepository_GetUsers_Call) Run(run func()) *MockUserRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_GetUsers_Call) Return(users []entity.User, err error) *MockUserRepository_GetUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_GetUsers_Call) RunAndReturn(run func() ([]entity.User, error)) *MockUserRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
